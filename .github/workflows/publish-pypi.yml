name: Publish to PyPI

on:
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-wheels:
    name: Build wheels (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      # macOS: universal2 + delocate + stable tag
      - name: Add macOS targets
        if: runner.os == 'macOS'
        run: |
          rustup target add aarch64-apple-darwin x86_64-apple-darwin

      - name: Prepare macOS repair tool (delocate)
        if: runner.os == 'macOS'
        run: |
          python -m pip install --upgrade pip
          pip install delocate
        env:
          MACOSX_DEPLOYMENT_TARGET: "11.0"

      - name: Run Rust tests
        run: cargo test --release --verbose

      - name: Build wheels (maturin)
        uses: PyO3/maturin-action@v1
        with:
          command: build
          manylinux: "2014" # portable Linux wheels
          args: >-
            --release
            --strip
            ${{ runner.os == 'macOS' && '--universal2' || '' }}
        env:
          MACOSX_DEPLOYMENT_TARGET: ${{ runner.os == 'macOS' && '11.0' || '' }}

      # Build a single sdist on Linux
      - name: Build sdist (Linux only)
        if: runner.os == 'Linux'
        uses: PyO3/maturin-action@v1
        with:
          command: sdist

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: target/wheels/*.whl
          if-no-files-found: error

      - name: Upload sdist (Linux only)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz
          if-no-files-found: error

  publish:
    name: Validate & Upload to PyPI
    runs-on: ubuntu-latest
    needs: build-wheels
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Collect files
        run: |
          mkdir -p upload
          find artifacts -name "*.whl" -exec cp {} upload/ \;
          find artifacts -name "*.tar.gz" -exec cp {} upload/ \;
          ls -l upload

      - name: "Preflight: verify full set present"
        run: |
          set -euo pipefail
          echo "Checking wheels by platform tag…"
          ls upload
          linux=$(ls upload/*.whl | grep -E '(manylinux|musllinux)' | wc -l)
          mac=$(ls upload/*.whl | grep -E 'macosx_' | wc -l)
          win=$(ls upload/*.whl | grep -E 'win_(amd64|arm64)' | wc -l || true)
          sdist=$(ls upload/*.tar.gz | wc -l)
          echo "linux=$linux mac=$mac win=$win sdist=$sdist"
          test "$linux" -ge 1
          test "$mac" -ge 1
          test "$win" -ge 1
          test "$sdist" -eq 1

      - name: Publish with maturin (API token) – fail on duplicates
        env:
          MATURIN_USERNAME: __token__
          MATURIN_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m pip install --upgrade pip
          pip install "maturin>=1.4"
          # No --skip-existing: if any file already exists on PyPI, this fails
          maturin upload upload/*
