name: Build & Publish to TestPyPI

on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  UV_RESOLUTION_STRATEGY: highest

jobs:
  build-test-package:
    name: Build & test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v5

      - name: Run Rust tests
        run: cargo test --release --verbose

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set up uv with efficient cache
        id: setup-uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock
            **/*.py.lock
          cache-suffix: os=${{ runner.os }}-py=3.12-res=${{ env.UV_RESOLUTION_STRATEGY }}

      - name: Build and install Python package
        run: uv pip install . --system

      - name: Run Python unittests
        run: python -m unittest discover -s tests/python -v

      - name: Prepare macOS wheel repair (delocate)
        if: runner.os == 'macOS'
        run: |
          python -m pip install --upgrade pip
          pip install delocate
        env:
          MACOSX_DEPLOYMENT_TARGET: "11.0"

      - name: Build wheels (maturin)
        uses: PyO3/maturin-action@v1
        with:
          command: build
          manylinux: "2_28"
          target: ${{ runner.os == 'macOS' && 'universal2-apple-darwin' || '' }}
          args: >-
            --release
            -i python3.12
            --strip
        env:
          MACOSX_DEPLOYMENT_TARGET: ${{ runner.os == 'macOS' && '11.0' || '' }}

      - name: Build sdist (Linux only)
        if: runner.os == 'Linux'
        uses: PyO3/maturin-action@v1
        with:
          command: sdist

      - name: Upload Python package artifacts (wheels)
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: target/wheels/*
          if-no-files-found: error

      - name: Upload sdist (Linux only)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: target/sdist/*.tar.gz # Corrected path
          if-no-files-found: error

  publish:
    name: Validate & Upload to TestPyPI
    runs-on: ubuntu-latest
    needs: build-test-package
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main') }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Collect files
        run: |
          set -euo pipefail
          mkdir -p upload
          find artifacts -name "*.whl" -exec cp -v {} upload/ \;
          find artifacts -name "*.tar.gz" -exec cp -v {} upload/ \; || true
          echo "Collected files:"
          ls -l upload

      - name: "Preflight: reject plain linux wheels & verify set"
        run: |
          set -euo pipefail
          bad=$(ls upload/*.whl | grep -E '/[^/]+-linux_(x86_64|i686|aarch64|armv7l)\.whl$' || true)
          if [ -n "$bad" ]; then
            echo "ERROR: Found non-manylinux wheels:"
            echo "$bad"
            exit 1
          fi
          total=$(ls upload/*.whl | wc -l)
          echo "Total wheels: $total"
          test "$total" -ge 3
          if ls upload/*.tar.gz >/dev/null 2>&1; then
            sdist_count=$(ls upload/*.tar.gz | wc -l)
            echo "sdist: $sdist_count"
            test "$sdist_count" -eq 1
          else
            echo "No sdist found (ok if intentionally omitted)."
          fi

      - name: Publish to TestPyPI (fail on duplicates)
        env:
          MATURIN_USERNAME: __token__
          MATURIN_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          python -m pip install --upgrade pip
          pip install "maturin>=1.4"
          maturin upload --repository-url https://test.pypi.org/legacy/ upload/*
